//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Utility/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Flight"",
            ""id"": ""d46d1a41-12cb-402c-82fe-e62856a30262"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Spectate"",
            ""id"": ""68979cac-2fee-45a6-a691-5d9d64d759c7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9c6ab012-7b49-4cd0-ae7b-e88e564f7d2b"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": ""NormalizeVector3"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Value"",
                    ""id"": ""7b6f939e-91b2-4d99-95fb-80969c5b1e7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""426522eb-155e-4c1b-8831-b0a7cb1c6bd9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c452ae57-028f-427f-8dfc-299d65812cdb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnableLook"",
                    ""type"": ""Value"",
                    ""id"": ""d8ae1879-e643-4d59-90e8-df6a8b030543"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""8f7a0490-7e7d-46e5-95e1-ac3335be068f"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""711168e1-5250-4e77-bc8f-e1b0a8a366a7"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fda40348-dede-41ef-8a8b-a98a68761040"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""adf38925-bb84-4efb-8dfd-d06ee39583e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c63f76b8-1859-4417-86e2-5133e679acad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""62505511-3b6b-4fe3-be21-25928b2041e7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""cc4a829a-4752-4b54-85ca-40509a2723c3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""194948a8-12eb-4623-8842-9c9136333667"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC-Default"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""dfe1f337-df1d-4347-9e0b-a512e9c96041"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""13ec4585-6939-45e5-bcad-9c43fbe725b4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d0b23449-d3ce-4f62-b30e-c25dcc1a1261"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d633710a-04dc-4c48-9793-a47a963b864e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": ""CursorPositionToManhattanDirection"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f00bf5f-aec4-414e-a22f-83774499e9f5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC-Default"",
            ""bindingGroup"": ""PC-Default"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Flight
        m_Flight = asset.FindActionMap("Flight", throwIfNotFound: true);
        // Spectate
        m_Spectate = asset.FindActionMap("Spectate", throwIfNotFound: true);
        m_Spectate_Movement = m_Spectate.FindAction("Movement", throwIfNotFound: true);
        m_Spectate_Boost = m_Spectate.FindAction("Boost", throwIfNotFound: true);
        m_Spectate_Roll = m_Spectate.FindAction("Roll", throwIfNotFound: true);
        m_Spectate_Look = m_Spectate.FindAction("Look", throwIfNotFound: true);
        m_Spectate_EnableLook = m_Spectate.FindAction("EnableLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flight
    private readonly InputActionMap m_Flight;
    private IFlightActions m_FlightActionsCallbackInterface;
    public struct FlightActions
    {
        private @PlayerControls m_Wrapper;
        public FlightActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Flight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlightActions set) { return set.Get(); }
        public void SetCallbacks(IFlightActions instance)
        {
            if (m_Wrapper.m_FlightActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_FlightActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public FlightActions @Flight => new FlightActions(this);

    // Spectate
    private readonly InputActionMap m_Spectate;
    private ISpectateActions m_SpectateActionsCallbackInterface;
    private readonly InputAction m_Spectate_Movement;
    private readonly InputAction m_Spectate_Boost;
    private readonly InputAction m_Spectate_Roll;
    private readonly InputAction m_Spectate_Look;
    private readonly InputAction m_Spectate_EnableLook;
    public struct SpectateActions
    {
        private @PlayerControls m_Wrapper;
        public SpectateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Spectate_Movement;
        public InputAction @Boost => m_Wrapper.m_Spectate_Boost;
        public InputAction @Roll => m_Wrapper.m_Spectate_Roll;
        public InputAction @Look => m_Wrapper.m_Spectate_Look;
        public InputAction @EnableLook => m_Wrapper.m_Spectate_EnableLook;
        public InputActionMap Get() { return m_Wrapper.m_Spectate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpectateActions set) { return set.Get(); }
        public void SetCallbacks(ISpectateActions instance)
        {
            if (m_Wrapper.m_SpectateActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_SpectateActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_SpectateActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_SpectateActionsCallbackInterface.OnMovement;
                @Boost.started -= m_Wrapper.m_SpectateActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_SpectateActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_SpectateActionsCallbackInterface.OnBoost;
                @Roll.started -= m_Wrapper.m_SpectateActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_SpectateActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_SpectateActionsCallbackInterface.OnRoll;
                @Look.started -= m_Wrapper.m_SpectateActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_SpectateActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_SpectateActionsCallbackInterface.OnLook;
                @EnableLook.started -= m_Wrapper.m_SpectateActionsCallbackInterface.OnEnableLook;
                @EnableLook.performed -= m_Wrapper.m_SpectateActionsCallbackInterface.OnEnableLook;
                @EnableLook.canceled -= m_Wrapper.m_SpectateActionsCallbackInterface.OnEnableLook;
            }
            m_Wrapper.m_SpectateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @EnableLook.started += instance.OnEnableLook;
                @EnableLook.performed += instance.OnEnableLook;
                @EnableLook.canceled += instance.OnEnableLook;
            }
        }
    }
    public SpectateActions @Spectate => new SpectateActions(this);
    private int m_PCDefaultSchemeIndex = -1;
    public InputControlScheme PCDefaultScheme
    {
        get
        {
            if (m_PCDefaultSchemeIndex == -1) m_PCDefaultSchemeIndex = asset.FindControlSchemeIndex("PC-Default");
            return asset.controlSchemes[m_PCDefaultSchemeIndex];
        }
    }
    public interface IFlightActions
    {
    }
    public interface ISpectateActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnEnableLook(InputAction.CallbackContext context);
    }
}
